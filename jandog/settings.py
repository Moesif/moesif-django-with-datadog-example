"""
Django settings for jandog project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from ddtrace import patch_all, Pin, patch, tracer

load_dotenv()

# The patch_all() function and the automatic instrumentation provided by ddtrace-run or
# ddtrace.bootstrap.sitecustomize are idempotent. This means that if an integration has already been patched,
# calling patch_all() again will not re-patch it or cause duplicate instrumentation.

# While it is generally unnecessary to use both ddtrace-run (or ddtrace.bootstrap.sitecustomize) and patch_all(),
# there are scenarios where you might combine them: Ensuring Patching in Complex Environments:
# In some cases, such as with uWSGI, the instrumentation provided by ddtrace-run or ddtrace.bootstrap.sitecustomize
# might not work as expected due to initialization timing issues. Adding patch_all()
# in your application code ensures that integrations are patched correctly.

patch_all()

tracer.configure(
    settings={
        'FILTERS': [],
        'DD_TAGS': 'team:debugging'
    }
)

# Below to custom writer to log traces to the console for easier debugging
# but you can use any writer you want after verify writing to console works.
# tracer.configure(writer=ConsoleWriter())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sea8fsfkg_0wu8bbfys!(zqh=g7j7ne5a#0n4!ts#a-!^t2@g$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'todo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'moesifdjango.middleware.moesif_middleware',
]

ROOT_URLCONF = 'jandog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jandog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MOESIF_MIDDLEWARE = {
    "APPLICATION_ID": os.environ.get("MOESIF_APPLICATION_ID"),
    "SKIP": lambda request, response: not request.path.startswith("/api/"),
    "SKIP_OUTGOING": lambda request, response: True,
    "IDENTIFY_USER": lambda request, response: str(request.user.id),
    "IDENTIFY_COMPANY": lambda request, response: str(request.user.primary_account),
    "LOG_BODY": True,
    # # Ignore requests made by card-service.
    "LOG_BODY_OUTGOING": False,
    "GET_METADATA": lambda request, response: {
         "company_name": 'abc',
    },
    "REQUEST_HEADER_MASKS": (
        # Contains auth token
        "authorization",
        # Contains the users jwt and refresh token
        "cookie",
        # Reduce noise
        "x-akamai-config-log-detail",
        "x-datadog-parent-id",
        "x-datadog-sampling-priority",
        "x-datadog-trace-id",
        "x-edgeconnect-session-id",
        "x-envoy-attempt-count",
        "x-envoy-decorator-operation",
        "x-envoy-external-address",
        "x-envoy-peer-metadata",
        "x-envoy-peer-metadata-id",
        "x-forwarded-for",
        "x-forwarded-proto",
        "x-request-id",
    ),
    # "LOCAL_DEBUG": True,
    "GET_SESSION_TOKEN": lambda request, response: "xxxxxxxxxx",
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}
